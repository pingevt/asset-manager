<?php

define('ASSET_TOOL_DIR', drupal_get_path('module', 'asset_tool'));

/**
 * Implements hook_init().
 */
function asset_tool_init() {
  global $user;

  if (!$user->uid && !($_GET['q'] == 'user' || $_GET['q'] == 'user/login' || $_GET['q'] == 'user/password' || $_GET['q'] == 'user/register')) {
    drupal_set_message("Access Denied: Please Login");
    drupal_goto('user/login');
  }
}


/**
 * Implements hook_menu().
 */
function asset_tool_menu() {
  $items['asset-tool/settings'] = array(
    'title' => 'AT Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_tool_settings_form'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'asset_tool_dashboard',
    'page arguments' => array('asset_tool_all_assets'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['assets'] = array(
    'title' => 'Assets',
    'page callback' => 'asset_tool_all_assets',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['assets/run-all-reports'] = array(
    'title' => 'Run Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_tool_run_all_reports'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['assets/clear-all-reports'] = array(
    'title' => 'Clear Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_tool_clear_all_reports'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['assets/view-all-reports'] = array(
    'title' => 'View All Reports',
    'page callback' => 'asset_tool_view_all_reports',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function asset_tool_dashboard() {
  return 'Dashboard: Not Implemented Yet';
}

/**
 * Implementation of hook_theme.
 */
function asset_tool_theme() {
  return array(
    'coefficients_table' => array(
      // The renderable element is the form.
      'render element' => 'item',
    ),
  );
}

function theme_coefficients_table($vars) {
  // Get the userful values.
  $item = $vars['item'];
  $title = $item['#title'];
  $rows = $item['rows'];
  $header = $item['#header'];

  $content = array(
    'label' => array(
      '#markup' => '<label>' . $item['#title'] . '</label>',
    ),
    'description' => array(
      '#markup' => isset($item['#description'])? '<div class="description">' . $item['#description'] . '</div>' : '',
    ),
    'table' => array(),
  );

  // Setup the structure to be rendered and returned.
  $content['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
    '#attributes' => array(
      'class' => array('table', 'table-bordered'),
    ),
  );

  // Traverse each row.  @see element_chidren().
  foreach (element_children($rows) as $row_index) {
    $row = array();
    // Traverse each column in the row.  @see element_children().
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }
    // Add the row to the table.
    $content['table']['#rows'][] = $row;
  }

  // Redner the table and return.
  return drupal_render($content);
}

function asset_tool_settings_form($form, &$form_state) {
  drupal_add_css(ASSET_TOOL_DIR . '/chartist/chartist.min.css');
  drupal_add_js(ASSET_TOOL_DIR . '/chartist/chartist.min.js');

  drupal_set_title('AT Settings');
  $form = array('#tree' => TRUE);

  // Check if assets exist... cannot change if assets exist.
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'asset');
  $result = $q->execute();

  $form['app_system_period'] = array(
    '#type' => 'select',
    '#title' => t('App Period'),
    '#options' => array(
      '' => '--Select--',
      'monthly' => 'Monthly',
      'quarterly' => 'Quarterly',
      'biannually' => 'Biannually',
      'annually' => 'Annually',
    ),
    '#default_value' => variable_get('app_system_period', ''),
    '#disabled' => (count($result) > 0),
  );

  if (count($result) > 0) {
    $asset_types = asset_types_get();
    $conditions = asset_tool_conditions_load();

    $target_age_settings = variable_get('app_target_age_settings', array());

    foreach ($asset_types as $asset_type_id => $asset_type) {
      $form[$asset_type_id] = array(
        '#type' => 'fieldset',
        '#title' => t($asset_type),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#attributes' => array(
          'class' => array(
            'asset-type-fieldset',
          ),
        ),
      );

      $form[$asset_type_id]['asset_type_constants']['target_age'] = array(
        '#type' => 'textfield',
        '#title' => t('Target Age in # of Periods'),
        '#default_value' => isset($target_age_settings[$asset_type_id])? $target_age_settings[$asset_type_id] : 0,
      );

      // Age Profile
      $age_settings = variable_get('app_system_age', array());
      $age_settings = isset($age_settings[$asset_type_id])? $age_settings[$asset_type_id] : array();

      if (!isset($age_settings['scoring_profile']['min']['x'])) {
        $age_settings['scoring_profile']['min']['x'] = 20;
      }
      if (!isset($age_settings['scoring_profile']['min']['y'])) {
        $age_settings['scoring_profile']['min']['y'] = 100;
      }
      if (!isset($age_settings['scoring_profile']['max']['x'])) {
        $age_settings['scoring_profile']['max']['x'] = 100;
      }
      if (!isset($age_settings['scoring_profile']['max']['y'])) {
        $age_settings['scoring_profile']['max']['y'] = 0;
      }

      $max_x = $age_settings['scoring_profile']['max']['x'];
      $max_y = $age_settings['scoring_profile']['max']['y'];
      $min_x = $age_settings['scoring_profile']['min']['x'];
      $min_y = $age_settings['scoring_profile']['min']['y'];

      $slope = (($max_x - $min_x) == 0)? '0' : ($max_y - $min_y) / ($max_x - $min_x);
      $b = $max_y - $slope * $max_x;

      $form[$asset_type_id]['age'] = array(
        '#type' => 'fieldset',
        '#title' => t('Age'),
        '#collapsible' => TRUE,
        'scoring_profile' => array(
          '#type' => 'item',
          '#title' => t('Scoring Profile'),
          'min' => array(
            '#type' => 'item',
            '#title' => t('Min'),
            'x' => array(
              '#type' => 'textfield',
              '#title' => t('x'),
              '#default_value' => isset($age_settings['scoring_profile']['min']['x'])? $age_settings['scoring_profile']['min']['x'] : NULL,
              '#size' => 10,
            ),
            'y' => array(
              '#type' => 'textfield',
              '#title' => t('y'),
              '#default_value' => isset($age_settings['scoring_profile']['min']['y'])? $age_settings['scoring_profile']['min']['y'] : NULL,
              '#size' => 10,
            ),
          ),
          'max' => array(
            '#type' => 'item',
            '#title' => t('Max'),
            'x' => array(
              '#type' => 'textfield',
              '#title' => t('x'),
              '#default_value' => isset($age_settings['scoring_profile']['max']['x'])? $age_settings['scoring_profile']['max']['x'] : NULL,
              '#size' => 10,
            ),
            'y' => array(
              '#type' => 'textfield',
              '#title' => t('y'),
              '#default_value' => isset($age_settings['scoring_profile']['max']['y'])? $age_settings['scoring_profile']['max']['y'] : NULL,
              '#size' => 10,
            ),
          ),
          'equation' => array(
            '#markup' => '<div class="equation">y = '.$slope.'x + '. $b . '</div>',
          ),
          '#suffix' => '<div class="ct-chart ct-chart-age-' . $asset_type_id . '"></div>
        <script>
  var options = {
  axisX: {
    type: Chartist.FixedScaleAxis,
    low: 0,
    high: 100,
    divisor: 4,
    ticks: [0, 25, 50, 75, 100]
  },
  axisY: {
    type: Chartist.FixedScaleAxis,
    low: 0,
    high: 100,
    divisor: 4,
    ticks: [0, 25, 50, 75, 100]
  },
  width: \'100%\',
  height: \'200px\',
  };
  var data = {
    series: [
      [
        {x: ' . $age_settings['scoring_profile']['min']['x'] . ', y: ' . $age_settings['scoring_profile']['min']['y'] . '},
        {x: ' . $age_settings['scoring_profile']['max']['x'] . ', y:' . $age_settings['scoring_profile']['max']['y'] . '}
      ]
    ]
  };
  new Chartist.Line(\'.ct-chart-age-' . $asset_type_id . '\', data, options);
        </script>
          ',
        ),
      );

      $form[$asset_type_id]['coefficients'] = array(
        '#theme' => 'coefficients_table',
        '#title' => t('Composite Score Coefficients'),
        '#description' => 'This is the description for the table',
        '#header' => array('', t('Period'), t('YTD'), t('LTD'), t('Total')),
        'rows' => array(),
        '#weight' => 100,
      );

      $i = 0;
      $asset_type_coefficients = variable_get('app_' . $asset_type_id . '_coefficients', array());

      $asset_type_coefficients_sum = 0;
      $asset_type_coefficients_sum += isset($asset_type_coefficients['age']['period'])? $asset_type_coefficients['age']['period'] : 0;
      $asset_type_coefficients_sum += isset($asset_type_coefficients['age']['ytd'])? $asset_type_coefficients['age']['ytd'] : 0;
      $asset_type_coefficients_sum += isset($asset_type_coefficients['age']['ltd'])? $asset_type_coefficients['age']['ltd'] : 0;

      $form[$asset_type_id]['coefficients']['rows']['age'] = array(
        'label' => array(
          '#markup' => 'Age',
        ),
        'period' => array(
          '#type' => 'textfield',
          '#title' => t('Period'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => isset($asset_type_coefficients['age']['period'])? $asset_type_coefficients['age']['period'] : 0,
        ),
        'ytd' => array(
          '#type' => 'textfield',
          '#title' => t('YTD'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => isset($asset_type_coefficients['age']['ytd'])? $asset_type_coefficients['age']['ytd'] : 0,
        ),
        'ltd' => array(
          '#type' => 'textfield',
          '#title' => t('LTD'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => isset($asset_type_coefficients['age']['ltd'])? $asset_type_coefficients['age']['ltd'] : 0,
        ),
        'total' => array(
          '#type' => 'textfield',
          '#title' => t('Total'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => $asset_type_coefficients_sum,
          '#disabled' => TRUE,
        ),
      );

      $total_coefficient_sum = $asset_type_coefficients_sum;

      foreach ($conditions as $cond_id => $cond) {
        $form[$asset_type_id][$cond_id] = $cond['controller']::settingsForm($asset_type_id);

        $asset_type_coefficients_sum = 0;
        $asset_type_coefficients_sum += isset($asset_type_coefficients[$cond_id]['period'])? $asset_type_coefficients[$cond_id]['period'] : 0;
        $asset_type_coefficients_sum += isset($asset_type_coefficients[$cond_id]['ytd'])? $asset_type_coefficients[$cond_id]['ytd'] : 0;
        $asset_type_coefficients_sum += isset($asset_type_coefficients[$cond_id]['ltd'])? $asset_type_coefficients[$cond_id]['ltd'] : 0;

        $form[$asset_type_id]['coefficients']['rows'][$cond_id] = array(
          'label' => array(
            '#markup' => $cond['name'],
          ),
          'period' => array(
            '#type' => 'textfield',
            '#title' => t('Month'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => isset($asset_type_coefficients[$cond_id]['period'])? $asset_type_coefficients[$cond_id]['period'] : 0,
            //'#disabled' => TRUE,
          ),
          'ytd' => array(
            '#type' => 'textfield',
            '#title' => t('YTD'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => isset($asset_type_coefficients[$cond_id]['ytd'])? $asset_type_coefficients[$cond_id]['ytd'] : 0,
          ),
          'ltd' => array(
            '#type' => 'textfield',
            '#title' => t('LTD'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => isset($asset_type_coefficients[$cond_id]['ltd'])? $asset_type_coefficients[$cond_id]['ltd'] : 0,
          ),
          'total' => array(
            '#type' => 'textfield',
            '#title' => t('Total'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => $asset_type_coefficients_sum,
            '#disabled' => TRUE,
          ),
        );

        $total_coefficient_sum += $asset_type_coefficients_sum;

        $i++;
      }

      $form[$asset_type_id]['coefficients']['rows']['main_total'] = array(
        'label' => array(),
        'period' => array(),
        'ytd' => array(),
        'ltd' => array(),
        'total' => array(
          '#type' => 'textfield',
          '#title' => t('Total'),
          '#default_value' => $total_coefficient_sum,
          '#size' => 6,
          '#title_display' => 'invisible',
          '#disabled' => TRUE,
        ),
      );
    }
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save Configuration'),
    ),
  );

  $form['#theme'] = 'system_settings_form';

  return $form;
}

function asset_tool_settings_form_validate($form, &$form_state) {
  $asset_types = asset_types_get();
  $conditions = asset_tool_conditions_load();

  foreach ($asset_types as $asset_type_id => $asset_type) {
    foreach ($conditions as $cond_id => $cond) {
      $cond['controller']::settingsFormValidate($form, $form_state, $asset_type_id);
    }
  }

}

function asset_tool_settings_form_submit($form, &$form_state) {
  variable_set('app_system_period', $form_state['values']['app_system_period']);

  $asset_types = asset_types_get();
  $conditions = asset_tool_conditions_load();

  //$target_age_settings = variable_get('app_target_age_settings', array());
  $target_age_settings = array();
  $age_settings = array();//

  foreach ($asset_types as $asset_type_id => $asset_type) {
    variable_set('app_' . $asset_type_id . '_coefficients', $form_state['values'][$asset_type_id]['coefficients']['rows']);

    // Age settings
    $target_age_settings[$asset_type_id] = $form_state['values'][$asset_type_id]['asset_type_constants']['target_age'];
    $age_settings[$asset_type_id] = $form_state['values'][$asset_type_id]['age'];

    foreach ($conditions as $cond_id => $cond) {
      $cond['controller']::settingsFormSubmit($form, $form_state, $asset_type_id);
    }
  }

  variable_set('app_target_age_settings', $target_age_settings);
  variable_set('app_system_age', $age_settings);
}

/**
 *
 */
function asset_tool_conditions_load() {

  $conditions = array();
  foreach (	module_implements('asset_tool_condition') as $module) {
    $func = $module . '_asset_tool_condition';
    $conditions += $func();
  }

  foreach ($conditions as $cond_machine_name => $cond) {
    $controller = new $cond['controller'];
    if (!is_subclass_of($controller, 'assetToolConditionBase')) {
      unset($conditions[$cond_machine_name]);
    }

    // Check weight.
    if (!isset($conditions[$cond_machine_name]['weight'])) {
      $conditions[$cond_machine_name]['weight'] = 0;
    }
  }

  // Check dependencies.
  foreach ($conditions as $cond_machine_name => $cond) {
    if (isset($cond['dependencies']) && !empty($cond['dependencies'])) {
      foreach ($cond['dependencies'] as $dependency) {
        if (!isset($conditions[$dependency])) {
          unset($conditions[$cond_machine_name]);
          break;
        }
      }
    }
  }

  // Reorder by weight.
  uasort($conditions, "_reorder_conditions");

  return $conditions;
}

function _reorder_conditions($a, $b) {
  if ($a['weight'] == $b['weight']) {
      return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Implements hook_schema_alter().
 */
function asset_tool_schema_alter(&$schema) {

  $conditions = asset_tool_conditions_load();

  foreach ($conditions as $con_id => $cond) {
    $db_updates = $cond['controller']::hookSchema();
    $schema['asset_data']['fields'] += $db_updates['fields'];
  }
}

/**
 * Implements hook_modules_enabled().
 */
function asset_tool_modules_enabled($modules) {
  $table = 'asset_data';

  foreach ($modules as $module) {
    $func = $module . '_asset_tool_condition';
    if (function_exists($func)) {
      $conditions = $func();

      // Save variable.
      $at_schema_settings = variable_get('at_schema_settings', array());

      foreach ($conditions as $cond_id => $condition) {
        $new_schema = $condition['controller']::hookSchema();

        $at_schema_settings[$module][$cond_id] = $new_schema;
        // Update fields
        foreach ($new_schema['fields'] as $field_id => $field_description) {
          if (!db_field_exists($table, $field_id)) {
            $r = db_add_field($table, $field_id, $field_description);
          }
        }
      }

      variable_set('at_schema_settings', $at_schema_settings);
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function asset_tool_modules_uninstalled($modules) {
  $table = 'asset_data';
  foreach ($modules as $module) {
    $at_schema_settings = variable_get('at_schema_settings', array());

    if (isset($at_schema_settings[$module])) {
      foreach($at_schema_settings[$module] as $cond_id => $new_schema) {
        foreach ($new_schema['fields'] as $field_id => $field_description) {
          if (db_field_exists($table, $field_id)) {
            $r = db_drop_field($table, $field_id);
          }
        }
      }

      unset($at_schema_settings[$module]);
    }
    variable_set('at_schema_settings', $at_schema_settings);
  }
}

function asset_tool_all_assets() {
  drupal_set_title('Assets');

  $build = array(
    'toolbar' => array(
      '#theme' => 'row',
      '#bob' => 'Joe',
      'col' => array(
        '#theme' => 'col',
        '#attributes' => array(
          'class' => array('col-sm-12 push-10'),
        ),
        'toolbar' => array(
          '#theme' => 'toolbar',
          '#attributes' => array(
            'class' => array('pull-right'),
          ),
          'btn_groups_reports' => array(
            '#theme' => 'btn_group',
            '#items' => array(
              l('<i class="fa fa-eraser"></i> Clear Reports', 'assets/clear-all-reports', array('query' => array('destination' => 'assets'), 'html' => TRUE, 'attributes' => array('class' => array('btn', 'btn-sm', 'btn-danger')))),
              l('<i class="fa fa-line-chart"></i> Run Reports', 'assets/run-all-reports', array('query' => array('destination' => 'assets'), 'html' => TRUE, 'attributes' => array('class' => array('btn', 'btn-sm', 'btn-warning')))),
            ),
            '#attributes' => array(
              'class' => array(),
            ),
          ),
          'btn_groups_add' => array(
            '#theme' => 'btn_group',
            '#items' => array(
              l('<i class="fa fa-plus"></i> Add Asset', '/asset/add', array('html' => TRUE, 'attributes' => array('class' => array('btn', 'btn-sm', 'btn-success')))),
            ),
          ),
        ),
      ),
    ),
    'table' => array(),
  );

  $headers = array(
    'aid' => array(
      'data' => 'Asset',
      'field' => 'a.name',
      'sort' => 'DESC',
    ),
    'external_id' => array(
      'data' => 'External ID',
      'field' => 'a.external_id',
    ),
    'type' => array(
      'data' => 'Type',
      'field' => 'a.type',
    ),
    'n' => array(
      'data' => '# of Records',
      'field' => 'count',
    ),
    'score' => array(
      'data' => 'Most Recent Score',
      'field' => 'a.total_score'
    ),
    'actions' => array(
      'data' => 'Actions',
    ),
  );

  $build['assets']['table'] = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => array(),
    '#sticky' => FALSE,
    '#attributes' => array(
      'class' => array('table', 'table-hover'),
    ),
    '#prefix' => '<div class="block"><div class="block-content"><div class="table-responsive">',
    '#suffix' => '</div></div></div>',
  );

  $q = db_select('asset', 'a')
  ->extend('TableSort');

  $q->fields('a', array('aid'));
  $q->leftJoin('asset_data', 'ad', 'ad.aid = a.aid');
  $q->addExpression('COUNT(*)', 'count');
  $q->groupBy('a.aid');

  $result = $q->orderByHeader($headers)
  ->execute();

  $asset_ids = $result->fetchCol('aid');
  $assets= asset_load_multiple($asset_ids);

  foreach ($assets as $asset) {
    $report = unserialize($asset->report_data);

    $asset_uri = asset_uri($asset);

    $str = '<div class="btn-group">
        <a href="/'.$asset_uri['path'].'/edit" class="btn btn-xs btn-default" type="button" data-toggle="tooltip" title="" data-original-title="Edit Asset"><i class="fa fa-pencil"></i></a>
        <a href="/'.$asset_uri['path'].'/run-report?destination=assets" class="btn btn-xs btn-success" type="button" data-toggle="tooltip" title="" data-original-title="Run Report"><i class="fa fa-line-chart"></i></a>
        <a href="/'.$asset_uri['path'].'/clear-report?destination=assets" class="btn btn-xs btn-warning" type="button" data-toggle="tooltip" title="" data-original-title="Clear Report"><i class="fa fa-eraser"></i></a>
        <a href="/'.$asset_uri['path'].'/delete?destination=assets" class="btn btn-xs btn-danger" type="button" data-toggle="tooltip" title="" data-original-title="Remove Asset"><i class="fa fa-times"></i></a>
    </div>';

    $row = array(
      l($asset->name, $asset_uri['path']),
      $asset->external_id,
      $asset->typeDisplay(),
      count($asset->data),
      isset($asset->total_score)? round($asset->total_score, 2) : '--',
      $str,
    );

    $build['assets']['table']['#rows'][] = $row;
  }

  return $build;
}

function asset_tool_run_all_reports() {
  $batch = array(
    'operations' => array(
      array('_at_batch_run_report', array()),
    ),
    'finished' => '_at_batch_run_report_finished',
    'title' => t('Processing Run Reports Batch'),
    'init_message' => t('Run Reports Batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Run Reports Batch has encountered an error.'),
    //'file' => drupal_get_path('module', 'batch_example') . '/batch_example.inc',
  );
  batch_set($batch);

  batch_process('assets/view-all-reports');
}

function _at_batch_run_report( &$context) {

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_asset'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT aid) FROM {asset}')->fetchField();
  }
  $limit = 1;

  $result = db_query_range("SELECT aid FROM {asset} WHERE aid > ".$context['sandbox']['current_asset']." ORDER BY aid ASC", 0, $limit, array(':current' => $context['sandbox']['current_asset']));

  while ($row = $result->fetchAssoc()) {
    $asset = asset_load($row['aid']);
    $asset->runReport();

    $context['sandbox']['progress']++;
    $context['sandbox']['current_asset'] = $asset->aid;
    $context['message'] = t('Now processing %asset', array('%asset' => $asset->name));
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

  if ($context['finished'] >= 1) {
    $context['results'][] = t('Ran reports');
  }
}

function asset_tool_clear_all_reports() {
  $batch = array(
    'operations' => array(
      array('_at_batch_clear_report', array()),
    ),
    'finished' => '_at_batch_run_report_finished',
    'title' => t('Processing Clear Reports Batch'),
    'init_message' => t('Clear Reports Batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Clear Reports Batch has encountered an error.'),
    //'file' => drupal_get_path('module', 'batch_example') . '/batch_example.inc',
  );
  batch_set($batch);

  batch_process('assets/view-all-reports');
}

function _at_batch_clear_report( &$context) {

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_asset'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT aid) FROM {asset}')->fetchField();
  }
  $limit = 1;

  $result = db_query_range("SELECT aid FROM {asset} WHERE aid > ".$context['sandbox']['current_asset']." ORDER BY aid ASC", 0, $limit, array(':current' => $context['sandbox']['current_asset']));

  while ($row = $result->fetchAssoc()) {
    $asset = asset_load($row['aid']);
    $asset->clearReport();

    $context['sandbox']['progress']++;
    $context['sandbox']['current_asset'] = $asset->aid;
    $context['message'] = t('Now processing %asset', array('%asset' => $asset->name));
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

  if ($context['finished'] >= 1) {
    $context['results'][] = t('Cleared reports');
  }
}

function _at_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = t('@count items successfully processed:', array('@count' => count($results)));
    // $message .= theme('item_list', $results);  // D6 syntax
    $message .= theme('item_list', array('items' => $results));
    drupal_set_message($message);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

function asset_tool_view_all_reports() {
  drupal_set_title('View All Reports');
  $build = array(
    'table_block' => array(
      '#theme' => '1block',
      '#themed' => 'bg-success',
      '#block_header' => 'Report',
      '#children' => array(
        'table' => array(),
      ),
    ),
  );

  $build['table_block']['#children']['table'] = _report_table_base();

  $q = db_select('asset', 'a')
  ->extend('TableSort');

  $q->fields('a', array('aid'));
  $q->leftJoin('asset_data', 'ad', 'ad.aid = a.aid');
  $q->addExpression('COUNT(*)', 'count');
  $q->groupBy('a.aid');

  $result = $q->execute();

  $asset_ids = $result->fetchCol('aid');
  $assets= asset_load_multiple($asset_ids);

  foreach ($assets as $asset) {
    $build['table_block']['#children']['table']['#rows'][] = $asset->reportValuesRow();
  }

  return $build;
}
