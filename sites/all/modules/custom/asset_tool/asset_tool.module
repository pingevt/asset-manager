<?php

define('ASSET_TOOL_DIR', drupal_get_path('module', 'asset_tool'));

/**
 * Implements hook_menu().
 */
function asset_tool_menu() {
  $items['asset-tool/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_tool_settings_form'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_theme.
 */
function asset_tool_theme() {
  return array(
    'coefficients_table' => array(
      // The renderable element is the form.
      'render element' => 'item',
    ),
  );
}

function theme_coefficients_table($vars) {
  // Get the userful values.
  $item = $vars['item'];
  $title = $item['#title'];
  $rows = $item['rows'];
  $header = $item['#header'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );

  // Traverse each row.  @see element_chidren().
  foreach (element_children($rows) as $row_index) {
    $row = array();
    // Traverse each column in the row.  @see element_children().
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }
    // Add the row to the table.
    $content['#rows'][] = $row;
  }

  // Redner the table and return.
  return drupal_render($content);
}

function asset_tool_settings_form($form, &$form_state) {
  drupal_add_css(ASSET_TOOL_DIR . '/chartist/chartist.min.css');
  drupal_add_js(ASSET_TOOL_DIR . '/chartist/chartist.min.js');

  $form = array('#tree' => TRUE);

  // Check if assets exist... cannot change if assets exist.
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'asset');
  $result = $q->execute();

  $form['app_system_period'] = array(
    '#type' => 'select',
    '#title' => t('App Period'),
    '#options' => array(
      '' => '--Select--',
      'monthly' => 'Monthly',
      'quarterly' => 'Quarterly',
      'biannually' => 'Biannually',
      'annually' => 'Annually',
    ),
    '#default_value' => variable_get('app_system_period', ''),
    '#disabled' => (count($result) > 0),
  );

  if (count($result) > 0) {
    $asset_types = asset_types_get();
    $conditions = asset_tool_conditions_load();

    $target_age_settings = variable_get('app_target_age_settings', array());

    foreach ($asset_types as $asset_type_id => $asset_type) {
      $form[$asset_type_id] = array(
        '#type' => 'fieldset',
        '#title' => t($asset_type),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form[$asset_type_id]['asset_type_constants']['target_age'] = array(
        '#type' => 'textfield',
        '#title' => t('Target Age in # of Periods'),
        '#default_value' => isset($target_age_settings[$asset_type_id])? $target_age_settings[$asset_type_id] : 0,
      );

      // Age Profile
      $age_settings = variable_get('app_system_age', array());
      $age_settings = isset($age_settings[$asset_type_id])? $age_settings[$asset_type_id] : array();

      if (!isset($age_settings['scoring_profile']['min']['x'])) {
        $age_settings['scoring_profile']['min']['x'] = 20;
      }
      if (!isset($age_settings['scoring_profile']['min']['y'])) {
        $age_settings['scoring_profile']['min']['y'] = 100;
      }
      if (!isset($age_settings['scoring_profile']['max']['x'])) {
        $age_settings['scoring_profile']['max']['x'] = 100;
      }
      if (!isset($age_settings['scoring_profile']['max']['y'])) {
        $age_settings['scoring_profile']['max']['y'] = 0;
      }

      $max_x = $age_settings['scoring_profile']['max']['x'];
      $max_y = $age_settings['scoring_profile']['max']['y'];
      $min_x = $age_settings['scoring_profile']['min']['x'];
      $min_y = $age_settings['scoring_profile']['min']['y'];

      $slope = (($max_x - $min_x) == 0)? '0' : ($max_y - $min_y) / ($max_x - $min_x);
      $b = $max_y - $slope * $max_x;

      $form[$asset_type_id]['age'] = array(
        '#type' => 'fieldset',
        '#title' => t('Age'),
        '#collapsible' => TRUE,
        'scoring_profile' => array(
          '#type' => 'item',
          '#title' => t('Scoring Profile'),
          'min' => array(
            '#type' => 'item',
            '#title' => t('Min'),
            'x' => array(
              '#type' => 'textfield',
              '#title' => t('x'),
              '#default_value' => isset($age_settings['scoring_profile']['min']['x'])? $age_settings['scoring_profile']['min']['x'] : NULL,
              '#size' => 10,
            ),
            'y' => array(
              '#type' => 'textfield',
              '#title' => t('y'),
              '#default_value' => isset($age_settings['scoring_profile']['min']['y'])? $age_settings['scoring_profile']['min']['y'] : NULL,
              '#size' => 10,
            ),
          ),
          'max' => array(
            '#type' => 'item',
            '#title' => t('Max'),
            'x' => array(
              '#type' => 'textfield',
              '#title' => t('x'),
              '#default_value' => isset($age_settings['scoring_profile']['max']['x'])? $age_settings['scoring_profile']['max']['x'] : NULL,
              '#size' => 10,
            ),
            'y' => array(
              '#type' => 'textfield',
              '#title' => t('y'),
              '#default_value' => isset($age_settings['scoring_profile']['max']['y'])? $age_settings['scoring_profile']['max']['y'] : NULL,
              '#size' => 10,
            ),
          ),
          'equation' => array(
            '#markup' => 'y = '.$slope.'x + '. $b,
          ),
          '#suffix' => '<div class="ct-chart-age-' . $asset_type_id . '"></div>
        <script>
  var options = {
  axisX: {
    type: Chartist.FixedScaleAxis,
    low: 0,
    high: 100,
    divisor: 4,
    ticks: [0, 25, 50, 75, 100]
  },
  axisY: {
    type: Chartist.FixedScaleAxis,
    low: 0,
    high: 100,
    divisor: 4,
    ticks: [0, 25, 50, 75, 100]
  },
  width: \'100%\',
  height: \'200px\',
  };
  var data = {
    series: [
      [
        {x: ' . $age_settings['scoring_profile']['min']['x'] . ', y: ' . $age_settings['scoring_profile']['min']['y'] . '},
        {x: ' . $age_settings['scoring_profile']['max']['x'] . ', y:' . $age_settings['scoring_profile']['max']['y'] . '}
      ]
    ]
  };
  new Chartist.Line(\'.ct-chart-age-' . $asset_type_id . '\', data, options);
        </script>
          ',
        ),
      );








      $form[$asset_type_id]['coefficients'] = array(
        '#theme' => 'coefficients_table',
        '#title' => t('Composite score Coefficients'),
        '#header' => array('', t('Month'), t('YTD'), t('LTD'), t('Total')),
        'rows' => array(),
        '#weight' => 100,
      );

      $i = 0;
      $asset_type_coefficients = variable_get('app_' . $asset_type_id . '_coefficients', array());

      $asset_type_coefficients_sum = 0;
      $asset_type_coefficients_sum += isset($asset_type_coefficients['age']['month'])? $asset_type_coefficients['age']['month'] : 0;
      $asset_type_coefficients_sum += isset($asset_type_coefficients['age']['ytd'])? $asset_type_coefficients['age']['ytd'] : 0;
      $asset_type_coefficients_sum += isset($asset_type_coefficients['age']['ltd'])? $asset_type_coefficients['age']['ltd'] : 0;

      $form[$asset_type_id]['coefficients']['rows']['age'] = array(
        'label' => array(
          '#markup' => 'Age',
        ),
        'month' => array(
          '#type' => 'textfield',
          '#title' => t('Month'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => isset($asset_type_coefficients['age']['month'])? $asset_type_coefficients['age']['month'] : 0,
        ),
        'ytd' => array(
          '#type' => 'textfield',
          '#title' => t('YTD'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => isset($asset_type_coefficients['age']['ytd'])? $asset_type_coefficients['age']['ytd'] : 0,
        ),
        'ltd' => array(
          '#type' => 'textfield',
          '#title' => t('LTD'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => isset($asset_type_coefficients['age']['ltd'])? $asset_type_coefficients['age']['ltd'] : 0,
        ),
        'total' => array(
          '#type' => 'textfield',
          '#title' => t('Total'),
          '#size' => 6,
          '#title_display' => 'invisible',
          '#default_value' => $asset_type_coefficients_sum,
        ),
      );

      foreach ($conditions as $cond_id => $cond) {
        $form[$asset_type_id][$cond_id] = $cond['controller']::settingsForm($asset_type_id);

        $asset_type_coefficients_sum = 0;
        $asset_type_coefficients_sum += isset($asset_type_coefficients[$cond_id]['month'])? $asset_type_coefficients[$cond_id]['month'] : 0;
        $asset_type_coefficients_sum += isset($asset_type_coefficients[$cond_id]['ytd'])? $asset_type_coefficients[$cond_id]['ytd'] : 0;
        $asset_type_coefficients_sum += isset($asset_type_coefficients[$cond_id]['ltd'])? $asset_type_coefficients[$cond_id]['ltd'] : 0;

        $form[$asset_type_id]['coefficients']['rows'][$cond_id] = array(
          'label' => array(
            '#markup' => $cond['name'],
          ),
          'month' => array(
            '#type' => 'textfield',
            '#title' => t('Month'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => isset($asset_type_coefficients[$cond_id]['month'])? $asset_type_coefficients[$cond_id]['month'] : 0,
          ),
          'ytd' => array(
            '#type' => 'textfield',
            '#title' => t('YTD'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => isset($asset_type_coefficients[$cond_id]['ytd'])? $asset_type_coefficients[$cond_id]['ytd'] : 0,
          ),
          'ltd' => array(
            '#type' => 'textfield',
            '#title' => t('LTD'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => isset($asset_type_coefficients[$cond_id]['ltd'])? $asset_type_coefficients[$cond_id]['ltd'] : 0,
          ),
          'total' => array(
            '#type' => 'textfield',
            '#title' => t('Total'),
            '#size' => 6,
            '#title_display' => 'invisible',
            '#default_value' => $asset_type_coefficients_sum,
          ),
        );

        $i++;
      }

      $form[$asset_type_id]['coefficients']['rows']['main_total'] = array(
        'label' => array(),
        'month' => array(),
        'ytd' => array(),
        'ltd' => array(),
        'total' => array(
          '#type' => 'textfield',
          '#title' => t('Total'),
          '#size' => 6,
          '#title_display' => 'invisible',
        ),
      );
    }
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save Configuration'),
    ),
  );

  $form['#theme'] = 'system_settings_form';

  return $form;
}

function asset_tool_settings_form_validate($form, &$form_state) {
//dpm($form_state);
  //variable_set('app_system_period', $form);

  $asset_types = asset_types_get();
  $conditions = asset_tool_conditions_load();

  foreach ($asset_types as $asset_type_id => $asset_type) {
    foreach ($conditions as $cond_id => $cond) {
      $cond['controller']::settingsFormValidate($form, $form_state, $asset_type_id);
    }
  }
}

function asset_tool_settings_form_submit($form, &$form_state) {
dpm($form_state);
  variable_set('app_system_period', $form_state['values']['app_system_period']);

  $asset_types = asset_types_get();
  $conditions = asset_tool_conditions_load();

  //$target_age_settings = variable_get('app_target_age_settings', array());
  $target_age_settings = array();
  $age_settings = array();//


  foreach ($asset_types as $asset_type_id => $asset_type) {
    variable_set('app_' . $asset_type_id . '_coefficients', $form_state['values'][$asset_type_id]['coefficients']['rows']);

    // Age settings
    $target_age_settings[$asset_type_id] = $form_state['values'][$asset_type_id]['asset_type_constants']['target_age'];
    $age_settings[$asset_type_id] = $form_state['values'][$asset_type_id]['age'];

    foreach ($conditions as $cond_id => $cond) {
      $cond['controller']::settingsFormSubmit($form, $form_state, $asset_type_id);
    }
  }

  variable_set('app_target_age_settings', $target_age_settings);
  variable_set('app_system_age', $age_settings);
}

/**
 *
 */
function asset_tool_conditions_load() {

  $conditions = array();
  foreach (	module_implements('asset_tool_condition') as $module) {
    $func = $module . '_asset_tool_condition';
    $conditions += $func();
  }

  foreach ($conditions as $cond_machine_name => $cond) {
    $controller = new $cond['controller'];
    if (!is_subclass_of($controller, 'assetToolConditionBase')) {
      unset($conditions[$cond_machine_name]);
    }

    // Check weight.
    if (!isset($conditions[$cond_machine_name]['weight'])) {
      $conditions[$cond_machine_name]['weight'] = 0;
    }
  }

  // Check dependencies.
  foreach ($conditions as $cond_machine_name => $cond) {
    if (isset($cond['dependencies']) && !empty($cond['dependencies'])) {
      foreach ($cond['dependencies'] as $dependency) {
        if (!isset($conditions[$dependency])) {
          unset($conditions[$cond_machine_name]);
          break;
        }
      }
    }
  }

  // Reorder by weight.
  uasort($conditions, "_reorder_conditions");

  return $conditions;
}

function _reorder_conditions($a, $b) {
  if ($a['weight'] == $b['weight']) {
      return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Implements hook_schema_alter().
 */
function asset_tool_schema_alter(&$schema) {

  $conditions = asset_tool_conditions_load();

  foreach ($conditions as $con_id => $cond) {
    $db_updates = $cond['controller']::hookSchema();
    $schema['asset_data']['fields'] += $db_updates['fields'];
  }
}

/**
 * Implements hook_modules_enabled().
 */
function asset_tool_modules_enabled($modules) {
  $table = 'asset_data';

  foreach ($modules as $module) {
    $func = $module . '_asset_tool_condition';
    if (function_exists($func)) {
      $conditions = $func();

      // Save variable.
      $at_schema_settings = variable_get('at_schema_settings', array());

      foreach ($conditions as $cond_id => $condition) {
        $new_schema = $condition['controller']::hookSchema();

        $at_schema_settings[$module][$cond_id] = $new_schema;
        // Update fields
        foreach ($new_schema['fields'] as $field_id => $field_description) {
          if (!db_field_exists($table, $field_id)) {
            $r = db_add_field($table, $field_id, $field_description);
          }
        }
      }

      variable_set('at_schema_settings', $at_schema_settings);
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function asset_tool_modules_uninstalled($modules) {
  $table = 'asset_data';
  foreach ($modules as $module) {
    $at_schema_settings = variable_get('at_schema_settings', array());

    if (isset($at_schema_settings[$module])) {
      foreach($at_schema_settings[$module] as $cond_id => $new_schema) {
        foreach ($new_schema['fields'] as $field_id => $field_description) {
          if (db_field_exists($table, $field_id)) {
            $r = db_drop_field($table, $field_id);
          }
        }
      }

      unset($at_schema_settings[$module]);
    }
    variable_set('at_schema_settings', $at_schema_settings);
  }
}
