<?php

/**
 * Implements hook_entity_info().
 */
function asset_entity_info() {
  $items['asset'] = array(
    'label' => t('Asset'),
    'controller class' => 'AssetController',
    'entity class' => 'Asset',
    'load hook' => 'asset_load',
    'base table' => 'asset',
    'uri callback' => 'asset_uri',
    'fieldable' => TRUE,
    'revisionable' => FALSE,
    'access callback' => 'asset_access_callback',
    //'access arguments' => array(''),
    'entity keys' => array(
      'id' => 'aid',
      'label' => 'name',
      //'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'asset' => array(
        'label' => t('Asset'),
        'admin' => array(
          'path' => 'admin/structure/asset/manage',
          //'real path' => 'admin/asset-tool/asset/asset-type/manage/asset',
          'access arguments' => array('administer asset'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'module' => 'asset',
    'views controller class' => 'EntityDefaultViewsController',
    'admin ui' => array(
      'path' => 'admin/content/assets',
      'file' => 'includes/asset.admin.inc',
      'controller class' => 'AssetUIController',
    ),
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function asset_menu() {
  $items = array();

  $items['asset/%asset'] = array(
    'title' => 'Asset',
    'page callback' => 'asset_view_entity',
    'page arguments' => array(1),
    'access callback' => 'asset_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['asset/%asset/run-report'] = array(
    'title' => 'Asset',
    'page callback' => 'asset_run_report',
    'page arguments' => array(1),
    'access callback' => 'asset_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['asset/%asset/clear-report'] = array(
    'title' => 'Asset',
    'page callback' => 'asset_clear_report',
    'page arguments' => array(1),
    'access callback' => 'asset_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['admin/content/asset/bulk/delete/%'] = array(
    'title' => 'Bulk Delete Asset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_bulk_delete', 5),
    'access arguments' => array('administer asset entities'),
    'file' => 'includes/asset.admin.inc',
  );

  $items['admin/structure/asset'] = array(
    'title' => 'Asset Fields',
    'access arguments' => array('administer asset entities'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function asset_permission() {
  return array(
    'administer asset entities' => array(
      'title' => t('Administer Asset Entities'),
      'description' => t('Allows a user to administer asset entities'),
    ),
    'view asset entities' => array(
      'title' => t('View Asset Entity'),
      'description' => t('Allows a user to view the asset entities.'),
    ),
    'create asset entities' => array(
      'title' => t('Create Asset Entities'),
      'description' => t('Allows a user to create asset entities.'),
    ),
    'edit asset entities' => array(
      'title' => t('Edit Asset Entities'),
      'description' => t('Allows a user to edit asset entities.'),
    ),
    'delete asset entities' => array(
      'title' => t('Delete Asset Entities'),
      'description' => t('Allows a user to delete asset entities.'),
    ),
    'use asset bulk operations' => array(
      'title' => t('Do bulk operations on Asset entities'),
      'description' => t('Allows a user to do bulk operations.'),
    ),
  );
}

/**
 * Check access permission for Asset Entity UI.
 */
function asset_access_menu_callback($op, $asset = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view asset entities', $account);

    case 'create':
      return user_access('create asset entities', $account);

    case 'update':
      return user_access('edit asset entities', $account);

    case 'delete':
      return user_access('delete asset entities', $account);
  }

  return FALSE;
}

/**
 * Asset access callback.
 */
function asset_access_callback() {
  if (user_is_anonymous() && !user_access('administer asset entities')) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implements hook_theme().
 */
function asset_theme() {
  $tpl_path = drupal_get_path('module', 'asset') . '/templates';
  return array(
    'asset_full' => array(
      'path' => $tpl_path,
      'variables' => array('asset' => NULL),
      'template' => 'asset',
    ),
  );
}

function template_preprocess_asset_full(&$vars) {
  $vars['page'] = TRUE;
}

function template_process_asset_full(&$vars) {
  $asset = $vars['asset'];
  $header = array('N');
  $rows = array();

  foreach ($asset->data as $n => $data) {
    $rows[] = array('n' => ($n + 1));
  }

  $conditions = asset_tool_conditions_load();

  foreach ($conditions as $condition) {
    $condition['controller']::viewFullHeader($header);

    $condition['controller']::viewFullRows($rows, $asset->data);
  }

  $vars['content']['data']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array(
      'class' => array('table', 'table-hover'),
    ),
    '#sticky' => FALSE,
    '#prefix' => '<div class="table-responsive">',
    '#suffix' => '</div>',
  );

  $vars['content']['data_form'] = drupal_get_form('asset_add_data', $asset);

  // Report
  $report_data = array();
  if (is_string($asset->report_data)) {
    $report_data = unserialize($asset->report_data);
  }

  $num_of_columns_section = count($conditions) + 1;
  $total_num_of_columns = $num_of_columns_section * 10 + 1 + 1;

  if (!empty($report_data)) {
    $num_of_columns_section = count($conditions) + 1;
    $total_num_of_columns = $num_of_columns_section * 10 + 1 + 1;

    $vars['report'] = _report_table_base();

    // Add in values
    $vars['report']['#rows'][] = $asset->reportValuesRow();
  }
  else {
    $vars['report'] = array(
      '#markup' => '<div>Re-run report to see fresh data</div>',
    );
  }
}

function _report_table_base() {

  $conditions = asset_tool_conditions_load();

  $num_of_columns_section = count($conditions) + 1;
  $total_num_of_columns = $num_of_columns_section * 10 + 1 + 1;

  $table = array(
    '#theme' => 'table',
    '#header' => array(array('data' => 'Data', 'colspan' => ($total_num_of_columns))),
    '#rows' => array(
      array(
        array(),
        array(
          'data' => 'N-1 Data Archive',
          'colspan' => $num_of_columns_section * 2,
          'header' => TRUE,
          'class' => array(
            'section-1',
          ),
        ),
        array(
          'data' => 'N Data',
          'colspan' => $num_of_columns_section * 2,
          'header' => TRUE,
          'class' => array(
            'section-2',
          ),
        ),
        array(
          'data' => 'Ranking Metric Values',
          'colspan' => $num_of_columns_section * 3,
          'header' => TRUE,
          'class' => array(
            'section-3',
          ),
        ),
        array(
          'data' => 'Ranking Metric Scores',
          'colspan' => $num_of_columns_section * 3,
          'header' => TRUE,
          'class' => array(
            'section-4',
          ),
        ),
        array(
          'data' => 'Total',
          'colspan' => 1,
          'header' => TRUE
        )
      ),
      array(
        array(),
        array(
          'data' => 'YTD N-1',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-1',
            'ytd',
          ),
        ),
        array(
          'data' => 'LTD N-1',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-1',
            'ltd',
          ),
        ),
        array(
          'data' => 'YTD N',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-2',
            'ytd',
          ),
        ),
        array(
          'data' => 'LTD N',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-2',
            'ltd',
          ),
        ),
        array(
          'data' => 'This Period',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-3',
            'period',
          ),
        ),
        array(
          'data' => 'YTD',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-3',
            'ytd',
          ),
        ),
        array(
          'data' => 'LTD',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-3',
            'ltd',
          ),
        ),
        array(
          'data' => 'This Period',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-4',
            'period',
          ),
        ),
        array(
          'data' => 'YTD',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-4',
            'ytd',
          ),
        ),
        array(
          'data' => 'LTD',
          'colspan' => $num_of_columns_section,
          'header' => TRUE,
          'class' => array(
            'section-4',
            'ltd',
          ),
        ),
        array(
          'data' => '',
          'colspan' => 1,
          'header' => FALSE,
        ),
      ),
    ),
    '#sticky' => FALSE,
    '#attributes' => array(
      'class' => array('table', 'table-hover', 'report-table'),
    ),
    '#prefix' => '<div class="table-responsive">',
    '#suffix' => '</div>',
  );

  $column_headers = array_fill(0, $total_num_of_columns, NULL);

  $column_headers[0 + 1] = 'Periods worked in year';
  $column_headers[$num_of_columns_section + 1] = 'Age in Periods';
  $column_headers[$num_of_columns_section * 2 + 1] = 'Periods worked in year';
  $column_headers[$num_of_columns_section * 3 + 1] = 'Age in Periods';
  $column_headers[$num_of_columns_section * 4 + 1] = '';
  $column_headers[$num_of_columns_section * 5 + 1] = '';
  $column_headers[$num_of_columns_section * 6 + 1] = 'Age LTD';
  $column_headers[$num_of_columns_section * 7 + 1] = '';
  $column_headers[$num_of_columns_section * 8 + 1] = '';
  $column_headers[$num_of_columns_section * 9 + 1] = 'Age';
  $column_headers[$total_num_of_columns-1] = 'AS';

  $delta = 2;
  foreach ($conditions as $condition_id => $condition) {
    $condition['controller']::reportTableHeaderRow($column_headers, $num_of_columns_section, $delta);
    $delta++;
  }

  $table['#rows'][] = $column_headers;

  return $table;
}

function asset_add_data($form, &$form_state, $asset) {

  $form = array();

  $form_state['asset'] = $asset;

  $form['aid'] = array(
    '#type' => 'hidden',
    '#value' => $asset->aid,
  );

  $form['data'] = array(
    '#type' => 'fieldset',
    '#title' => t('title'),
    '#tree' => TRUE,
  );

  $conditions = asset_tool_conditions_load();

  if (isset($asset->data['adid'])) {
    $form['data'][$i]['adid'] = array(
      '#type' => 'hidden',
      '#value' => $asset->data['adid'],
    );
  }

  foreach ($conditions as $con_id => $cond) {
    $form['data'][$con_id] = $cond['controller']::assetFormItems($asset, -1);
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Add Data'),
    ),
  );

  return $form;
}

function asset_add_data_validate($form, &$form_state) {

}

function asset_add_data_submit($form, &$form_state) {
  $asset = $form_state['asset'];

  $asset->data[] = $form_state['values']['data'];
  $asset->save();
}

/**
 * Helper function for custom queries.
 */
function asset_entity_query($conditions = array()) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'asset');

  // Apply conditions.
  foreach ($conditions as $key => $value) {
    $query->propertyCondition($key, $value);
  }

  $result = $query->execute();

  if (isset($result['asset'])) {
    $assets = array_keys($result['asset']);
  }
  else {
    $assets = array();
  }

  return $assets;
}

/**
 * Saves Asset to database.
 */
function asset_save(asset $asset) {
  return $asset->save();
}

/**
 * View for /asset/<asset_id> page.
 */
function asset_view_entity($asset) {
  drupal_set_title($asset->name);
  // Path not entity.
  $asset_output = theme('asset_full', array('asset' => $asset));
  return $asset_output;
}

function asset_run_report($asset) {
  $asset->runReport();
  drupal_goto('asset/' . $asset->aid);
}

function asset_clear_report($asset) {
  $asset->clearReport();
  drupal_goto('asset/' . $asset->aid);
}

/**
 * Menu autoloader for /asset.
 */
function asset_load($asset_id, $reset = FALSE) {
  $assets = asset_load_multiple(array($asset_id), array(), $reset);
  return reset($assets);
}

/**
 * Load multiple assets based on certain conditions.
 */
function asset_load_multiple($asset_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('asset', $asset_ids, $conditions, $reset);
}

/**
 * Deletes an Asset.
 */
function asset_delete(asset $asset) {
  $asset->delete();
}

/**
 * Delete multiple Assets.
 */
function asset_delete_multiple(array $asset_ids) {
  entity_get_controller('asset')->delete($asset_ids);
}

function asset_uri($asset) {
  return array('path' => 'asset/' . $asset->identifier());
}

function _get_period_labels() {
  $labels = array(
    'monthly' => array(),
    'quarterly' => array(
      '1' => 'First Q',
      '2' => 'Second Q',
      '3' => 'Third Q',
      '4' => 'First Qourth',
    ),
    'biannually' => array(
      '1' => 'First Half',
      '2' => 'Second Half',
    )
  );
  for ($i=1;$i<=12;$i++) {
    $labels['monthly'][$i] = date('M', mktime(0, 0, 0, $i));
  }

  return $labels;
}

/**
 *
 */
function asset_types_get() {
  return array(
    'backhoes_excavators' => 'Backhoes/Excavators',
    'bulldozers' => 'Bulldozers',
    /*
    'front_loaders' => 'Front Loaders',
    'dump_trucks' => 'Dump Trucks',
    'cranes' => 'Cranes',
    */
  );
}