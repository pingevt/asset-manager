<?php

/**
 * Implements hook_entity_info().
 */
function asset_entity_info() {
  $items['asset'] = array(
    'label' => t('Asset'),
    'controller class' => 'AssetController',
    'entity class' => 'Asset',
    'load hook' => 'asset_load',
    'base table' => 'asset',
    'uri callback' => 'asset_uri',
    'fieldable' => TRUE,
    'revisionable' => FALSE,
    'access callback' => 'asset_access_callback',
    //'access arguments' => array(''),
    'entity keys' => array(
      'id' => 'aid',
      'label' => 'name',
      //'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'asset' => array(
        'label' => t('Asset'),
        'admin' => array(
          'path' => 'admin/structure/asset/manage',
          //'real path' => 'admin/asset-tool/asset/asset-type/manage/asset',
          'access arguments' => array('administer asset'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'module' => 'asset',
    'views controller class' => 'EntityDefaultViewsController',
    'admin ui' => array(
      'path' => 'admin/content/assets',
      'file' => 'includes/asset.admin.inc',
      'controller class' => 'AssetUIController',
    ),
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function asset_menu() {
  $items = array();

  $items['asset/%asset'] = array(
    'title' => 'Asset',
    'page callback' => 'asset_view_entity',
    'page arguments' => array(1),
    'access callback' => 'asset_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['asset/%asset/run-report'] = array(
    'title' => 'Asset',
    'page callback' => 'asset_run_report',
    'page arguments' => array(1),
    'access callback' => 'asset_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['admin/content/asset/bulk/delete/%'] = array(
    'title' => 'Bulk Delete Asset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_bulk_delete', 5),
    'access arguments' => array('administer asset entities'),
    'file' => 'includes/asset.admin.inc',
  );

  $items['admin/structure/asset'] = array(
    'title' => 'Asset Fields',
    'access arguments' => array('administer asset entities'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function asset_permission() {
  return array(
    'administer asset entities' => array(
      'title' => t('Administer Asset Entities'),
      'description' => t('Allows a user to administer asset entities'),
    ),
    'view asset entities' => array(
      'title' => t('View Asset Entity'),
      'description' => t('Allows a user to view the asset entities.'),
    ),
    'create asset entities' => array(
      'title' => t('Create Asset Entities'),
      'description' => t('Allows a user to create asset entities.'),
    ),
    'edit asset entities' => array(
      'title' => t('Edit Asset Entities'),
      'description' => t('Allows a user to edit asset entities.'),
    ),
    'delete asset entities' => array(
      'title' => t('Delete Asset Entities'),
      'description' => t('Allows a user to delete asset entities.'),
    ),
    'use asset bulk operations' => array(
      'title' => t('Do bulk operations on Asset entities'),
      'description' => t('Allows a user to do bulk operations.'),
    ),
  );
}

/**
 * Check access permission for Asset Entity UI.
 */
function asset_access_menu_callback($op, $asset = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view asset entities', $account);

    case 'create':
      return user_access('create asset entities', $account);

    case 'update':
      return user_access('edit asset entities', $account);

    case 'delete':
      return user_access('delete asset entities', $account);
  }

  return FALSE;
}

/**
 * Asset access callback.
 */
function asset_access_callback() {
  if (user_is_anonymous() && !user_access('administer asset entities')) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implements hook_theme().
 */
function asset_theme() {
  $tpl_path = drupal_get_path('module', 'asset') . '/templates';
  return array(
    'asset_full' => array(
      'path' => $tpl_path,
      'variables' => array('asset' => NULL),
      'template' => 'asset',
    ),
  );
}

function template_preprocess_asset_full(&$vars) {
  $vars['page'] = TRUE;
}

function template_process_asset_full(&$vars) {
  $asset = $vars['asset'];
  $vars['content']['data']['header'] = array(
    '#markup' => '<h3>Data</h3>',
  );
  $header = array('N');
  $rows = array();

  foreach ($asset->data as $n => $data) {
    $rows[] = array('n' => ($n + 1));
  }

  $conditions = asset_tool_conditions_load();

  foreach ($conditions as $condition) {
    $condition['controller']::viewFullHeader($header);

    $condition['controller']::viewFullRows($rows, $asset->data);
  }

  $vars['content']['data']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  // Report
dpm($vars);
  $report_data = array();
  if (is_string($asset->report_data)) {
    $report_data = unserialize($asset->report_data);
  }
dpm($report_data);
  $num_of_columns_section = count($conditions) + 1;
  $total_num_of_columns = $num_of_columns_section * 10 + 1;

  if (!empty($report_data)) {
    $vars['report'] = array(
      '#theme' => 'table',
      '#header' => array(array('data' => 'Data', 'colspan' => ($total_num_of_columns))),
      '#rows' => array(
        array(
          array(
            'data' => 'N-1 Data Archive',
            'colspan' => $num_of_columns_section * 2,
            'header' => TRUE
          ),
          array(
            'data' => 'N Data',
            'colspan' => $num_of_columns_section * 2,
            'header' => TRUE
          ),
          array(
            'data' => 'Ranking Metric Values',
            'colspan' => $num_of_columns_section * 3,
            'header' => TRUE
          ),
          array(
            'data' => 'Ranking Metric Scores',
            'colspan' => $num_of_columns_section * 3,
            'header' => TRUE
          ),
          array(
            'data' => 'Total',
            'colspan' => 1,
            'header' => TRUE
          )
        ),
        array(
          array(
            'data' => 'YTD N-1',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'LTD N-1',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'YTD N',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'LTD N',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'This Period',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'YTD',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'LTD',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'This Period',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'YTD',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => 'LTD',
            'colspan' => $num_of_columns_section,
            'header' => TRUE,
          ),
          array(
            'data' => '',
            'colspan' => 1,
            'header' => FALSE,
          ),
        ),
      ),
    );

    $column_headers = array_fill(0, $total_num_of_columns, NULL);

    $column_headers[0] = 'Periods worked in year';
    $column_headers[$num_of_columns_section] = 'Age in Periods';
    $column_headers[$num_of_columns_section * 2] = 'Periods worked in year';
    $column_headers[$num_of_columns_section * 3] = 'Age in Periods';
    $column_headers[$num_of_columns_section * 4] = '';
    $column_headers[$num_of_columns_section * 5] = '';
    $column_headers[$num_of_columns_section * 6] = 'Age LTD';
    $column_headers[$num_of_columns_section * 7] = '';
    $column_headers[$num_of_columns_section * 8] = '';
    $column_headers[$num_of_columns_section * 9] = 'Age';
    $column_headers[$total_num_of_columns-1] = 'AS';

    $delta = 1;
    foreach ($conditions as $condition_id => $condition) {
      $condition['controller']::reportTableHeaderRow($column_headers, $num_of_columns_section, $delta);
      $delta++;
    }

    $vars['report']['#rows'][] = $column_headers;

    // Add in values
    $values_row = array();

    foreach ($report_data as $section => $section_data) {
      if (is_array($section_data)) {
        foreach ($section_data as $subsection => $subsection_data) {
          if(is_array($subsection_data)) {
            foreach ($subsection_data as $key => $value) {
              if ($value === NULL) {
                $values_row[] = array(
                  'data' => $value,
                  'class' => array('null'),
                );
              }
              else {
                $values_row[] = array(
                  'data' => $value,
                );
              }
            }
          }
        }
      }
      else {
        $values_row[] = array(
          'data' => $value,
        );
      }
    }

    $vars['report']['#rows'][] = $values_row;
  }
  else {
    $vars['report'] = array(
      '#markup' => '<div>Re-run report to see fresh data</div>',
    );
  }
}


/**
 * Helper function for custom queries.
 */
function asset_entity_query($conditions = array()) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'asset');

  // Apply conditions.
  foreach ($conditions as $key => $value) {
    $query->propertyCondition($key, $value);
  }

  $result = $query->execute();

  if (isset($result['asset'])) {
    $assets = array_keys($result['asset']);
  }
  else {
    $assets = array();
  }

  return $assets;
}

/**
 * Saves Asset to database.
 */
function asset_save(asset $asset) {
  return $asset->save();
}

/**
 * View for /asset/<asset_id> page.
 */
function asset_view_entity($asset) {
  drupal_set_title($asset->name);
  // Path not entity.
  $asset_output = theme('asset_full', array('asset' => $asset));
  return $asset_output;
}

function asset_run_report($asset) {
  $asset->runReport();
  drupal_goto('asset/' . $asset->aid);
}

/**
 * Menu autoloader for /asset.
 */
function asset_load($asset_id, $reset = FALSE) {
  $assets = asset_load_multiple(array($asset_id), array(), $reset);
  return reset($assets);
}

/**
 * Load multiple assets based on certain conditions.
 */
function asset_load_multiple($asset_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('asset', $asset_ids, $conditions, $reset);
}

/**
 * Deletes an Asset.
 */
function asset_delete(asset $asset) {
  $asset->delete();
}

/**
 * Delete multiple Assets.
 */
function asset_delete_multiple(array $asset_ids) {
  entity_get_controller('asset')->delete($asset_ids);
}

function asset_uri($asset) {
  return array('path' => 'asset/' . $asset->identifier());
}

/**
 *
 */
function asset_types_get() {
  return array(
    'bulldozers' => 'Bulldozers',
    /*
    'front_loaders' => 'Front Loaders',
    'dump_trucks' => 'Dump Trucks',
    'backhoes_excavators' => 'Backhoes/Excavators',
    'cranes' => 'Cranes',
    */
  );
}